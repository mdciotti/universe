// Generated by CoffeeScript 1.4.0
var Bin, Controller, GridController, Gui, HTMLController, TextController,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Bin = (function() {

  Bin.prototype.container = null;

  Bin.prototype.controllers = [];

  Bin.prototype.node = null;

  function Bin(title, type, open) {
    var titlebar;
    this.title = title;
    this.type = type;
    if (open == null) {
      open = true;
    }
    this.node = document.createElement("details");
    this.node.classList.add("bin");
    titlebar = document.createElement("summary");
    titlebar.classList.add("bin-title-bar");
    title = document.createElement("span");
    title.classList.add("bin-title");
    title.innerText = this.title;
    titlebar.appendChild(title);
    this.node.appendChild(titlebar);
    this.container = document.createElement("div");
    this.container.classList.add("bin-container");
    this.container.classList.add("bin-" + this.type);
    this.node.appendChild(this.container);
    if (open) {
      this.open();
    }
  }

  Bin.prototype.isOpen = function() {
    return this.node.hasAttribute("open");
  };

  Bin.prototype.open = function() {
    return this.node.setAttribute("open", "");
  };

  Bin.prototype.close = function() {
    return this.node.removeAttribute("open");
  };

  Bin.prototype.toggle = function() {
    if (this.isOpen()) {
      return this.close();
    } else {
      return this.open();
    }
  };

  Bin.prototype.addControl = function(controller) {
    this.controllers.push(controller);
    return this.container.appendChild(controller.node);
  };

  return Bin;

})();

Controller = (function() {

  function Controller(type, title, value, opts) {
    this.type = type;
    this.title = title;
    this.value = value;
    this.node = document.createElement("div");
    this.node.classList.add("");
  }

  Controller.prototype.node = null;

  return Controller;

})();

TextController = (function(_super) {

  __extends(TextController, _super);

  function TextController() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.node = document.createElement("label");
  }

  return TextController;

})(Controller);

HTMLController = (function(_super) {

  __extends(HTMLController, _super);

  function HTMLController() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.node = document.createElement("div");
  }

  HTMLController.prototype.getHTML = function() {
    return this.node.innerHTML;
  };

  HTMLController.prototype.setHTML = function(content) {
    return this.node.innerHTML = content;
  };

  return HTMLController;

})(Controller);

GridController = (function(_super) {

  __extends(GridController, _super);

  function GridController() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.node = document.createDocumentFragment();
  }

  GridController.prototype.createItems = function(list) {
    var _this = this;
    return list.forEach(function(item) {
      var itemNode;
      itemNode = document.createElement;
      return _this.node.appendChild();
    });
  };

  return GridController;

})(Controller);

Gui = (function() {

  function Gui(container, settings) {
    this.width = 256;
    this.node = document.createElement("div");
    this.node.classList.add("gui");
    container.appendChild(this.node);
  }

  Gui.prototype.node = null;

  Gui.prototype.bins = [];

  Gui.prototype.addBin = function(bin) {
    this.bins.push(bin);
    return this.node.appendChild(bin.node);
  };

  return Gui;

})();
